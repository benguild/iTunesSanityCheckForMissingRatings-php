<?php
require('CFPropertyList/classes/CFPropertyList/CFPropertyList.php');
use CFPropertyList\CFPropertyList as CFPropertyList;

ini_set('memory_limit','8G');
date_default_timezone_set('UTC');
////

echo("\n");
echo('########################################'."\n");
echo('This PHP script will find songs in your iTunes Library without star ratings, and will then scour your specified backup files to find the most recent star rating for that file in case it was somehow removed or lost somewhere along the way for some reason. It will generate an AppleScript as output that can be run on your Mac to automatically create al of the missing ratings!'."\n");
echo('########################################'."\n\n");

echo('Created by Ben Guild, Copyright (c) 2015'."\n");
echo('NO WARRANTY, USE AT YOUR OWN RISK!'."\n\n");

echo('########################################'."\n\n");
////

if (count($argv)<3)
{
	echo('Usage: php iTunesSanityCheckForMissingRatings.php path1 path2'."\n\n");
	
	echo('- path1 = your current, most recent, active `iTunes Music Library.xml` file that is being used by iTunes.'."\n");
	echo('- path2 = path to a single folder at root-level (without subfolders) containing all of the XML files (only!) that you watch to check for songs with previously set star ratings.'."\n\n"); 
	
	echo('Output is a date-suffixed AppleScript that can be run on your Mac to set the missing star ratings in iTunes.'."\n\n"); 
	exit();
	
}
////

$loadDirectory=new DirectoryIterator($argv[2]);
$xmlFiles=array($argv[1]);

foreach ($loadDirectory as $fileinfo)
{
    if (!$fileinfo->isDot())
    {
	    echo('Found backup file: '.$fileinfo->getPathname()."\n");
	    $xmlFiles[]=$fileinfo->getPathname();
	    
    }
    
}

echo("\n");

if (count($xmlFiles)<2)
{
	exit('Not enough files provided/found for this script to be useful.'."\n");
	
}
////

$tracksWithoutRatings=array();
$tracksToPatch=array();

foreach ($xmlFiles as $i => $xmlFile)
{
	echo('Loading: '.$xmlFile."...\n");
	
	$plist=new CFPropertyList($xmlFile, CFPropertyList::FORMAT_XML);
	if (!$plist) { exit('Could not load: '.$xmlFile); }
	
    $plist_data=$plist->toArray();
    ////
    
    echo('Found '.number_format(count($plist_data['Tracks'])).' total track(s) in this file, and the file was created '.date('D M j G:i:s T Y',$plist_data['Date']).'....'."\n");
    
    $thisFoundCount=0;
	
    if (!$i) { echo('Looking for tracks without ratings...'."\n"); }
    else { echo('Looking for tracks with ratings, using the original subset...'."\n"); }
    
    foreach ($plist_data['Tracks'] as $track)
    {
        if (!$i && !isset($track['Rating'])) // Found one that needs patching?
        {
	        $tracksWithoutRatings[$track['Persistent ID']]=true;
	        
        }
        else if ($i && isset($track['Rating']) && $tracksWithoutRatings[$track['Persistent ID']]) // Found one that we can patch?
        {
	        if (!$tracksToPatch[$track['Persistent ID']] || $tracksToPatch[$track['Persistent ID']][0]<$plist_data['Date']) // Have we not found this track yet, or is that rating from an older file?
	        {
		        $tracksToPatch[$track['Persistent ID']]=array($plist_data['Date'],$track['Rating'],$track['Location']);
		        
	        }
	        
        }
        
    }
	////
	
	if (!$i)
	{
		echo('Found '.count($tracksWithoutRatings).' track(s) without ratings.'."\n");
		
	}
	else
	{
		echo('Found '.count($tracksToPatch).' track(s) to patch so far.'."\n");
		
	}
	
    echo("\n");
    
}
////

echo('########################################'."\n");
echo('########################################'."\n\n");

if (!count($tracksToPatch))
{
	exit('No song star ratings could be recovered! Hopefully that\'s a good thing?'."\n");
	
}
else
{
	$outputFilename='FixMissingiTunesSongRatings-'.time().'-scpt.txt';
	
	$outputText='## Generated by iTunesSanityCheckForMissingRatings.php on '.date('D M j G:i:s T Y')."\n\n";
	$outputText.='tell application "iTunes"'."\n\n";
	
	foreach ($tracksToPatch as $trackID => $trackArray)
	{
		$outputText.='set rating of (some track of library playlist 1 whose persistent ID is "'.$trackID.'") to '.$trackArray[1].' ## rating last seen '.date('D M j G:i:s T Y',$trackArray[0]).', sample filename: '.$trackArray[2]."\n";
		
	}
	
	$outputText.="\n".'end tell'."\n";
	////
	
	file_put_contents(dirname(__FILE__).'/'.$outputFilename, $outputText);
	echo('Saved `'.$outputFilename.'` to script folder. Open it in the "Script Editor" app included on your Mac!'."\n");
	
}

?>